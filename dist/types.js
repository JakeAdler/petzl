"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSequencerConfig = exports.isMatchExtensionsConfig = exports.isEntryPointConfig = exports.isDoOnceAction = exports.isConfigurationAction = exports.isDescribeEndAction = exports.isDescribeStartAction = exports.isItAction = exports.isHookAction = exports.ConfigError = void 0;
// Errors
var ConfigError = /** @class */ (function (_super) {
    __extends(ConfigError, _super);
    function ConfigError(optionName, message) {
        var _this = _super.call(this, "Option '" + optionName + "': " + message) || this;
        _this.name = "Config Error";
        return _this;
    }
    return ConfigError;
}(Error));
exports.ConfigError = ConfigError;
// Guards
var isHookAction = function (action) {
    return action.type === "hook";
};
exports.isHookAction = isHookAction;
var isItAction = function (action) {
    return action.type === "it";
};
exports.isItAction = isItAction;
var isDescribeStartAction = function (action) {
    return action.type === "describe-start";
};
exports.isDescribeStartAction = isDescribeStartAction;
var isDescribeEndAction = function (action) {
    return action.type === "describe-end";
};
exports.isDescribeEndAction = isDescribeEndAction;
var isConfigurationAction = function (action) {
    return action.type === "configure";
};
exports.isConfigurationAction = isConfigurationAction;
var isDoOnceAction = function (action) {
    return action.type === "doOnce";
};
exports.isDoOnceAction = isDoOnceAction;
var isEntryPointConfig = function (config) {
    return config.use === "entryPoint";
};
exports.isEntryPointConfig = isEntryPointConfig;
var isMatchExtensionsConfig = function (config) {
    return config.use === "matchExtensions";
};
exports.isMatchExtensionsConfig = isMatchExtensionsConfig;
var isSequencerConfig = function (config) {
    return config.use === "sequencer";
};
exports.isSequencerConfig = isSequencerConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQStHQSxTQUFTO0FBRVQ7SUFBaUMsK0JBQUs7SUFDckMscUJBQVksVUFBa0IsRUFBRSxPQUFlO1FBQS9DLFlBQ0Msa0JBQU0sYUFBVyxVQUFVLFdBQU0sT0FBUyxDQUFDLFNBRTNDO1FBREEsS0FBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7O0lBQzVCLENBQUM7SUFDRixrQkFBQztBQUFELENBQUMsQUFMRCxDQUFpQyxLQUFLLEdBS3JDO0FBTFksa0NBQVc7QUFPeEIsU0FBUztBQUVGLElBQU0sWUFBWSxHQUFHLFVBQUMsTUFBYztJQUMxQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDO0FBQy9CLENBQUMsQ0FBQztBQUZXLFFBQUEsWUFBWSxnQkFFdkI7QUFFSyxJQUFNLFVBQVUsR0FBRyxVQUN6QixNQUFjO0lBRWQsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQztBQUM3QixDQUFDLENBQUM7QUFKVyxRQUFBLFVBQVUsY0FJckI7QUFFSyxJQUFNLHFCQUFxQixHQUFHLFVBQ3BDLE1BQWM7SUFFZCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBSlcsUUFBQSxxQkFBcUIseUJBSWhDO0FBRUssSUFBTSxtQkFBbUIsR0FBRyxVQUNsQyxNQUFjO0lBRWQsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLGNBQWMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFKVyxRQUFBLG1CQUFtQix1QkFJOUI7QUFFSyxJQUFNLHFCQUFxQixHQUFHLFVBQ3BDLE1BQWM7SUFFZCxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDO0FBQ3BDLENBQUMsQ0FBQztBQUpXLFFBQUEscUJBQXFCLHlCQUloQztBQUVLLElBQU0sY0FBYyxHQUFHLFVBQUMsTUFBYztJQUM1QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0FBQ2pDLENBQUMsQ0FBQztBQUZXLFFBQUEsY0FBYyxrQkFFekI7QUFFSyxJQUFNLGtCQUFrQixHQUFHLFVBQ2pDLE1BQTJCO0lBRTNCLE9BQU8sTUFBTSxDQUFDLEdBQUcsS0FBSyxZQUFZLENBQUM7QUFDcEMsQ0FBQyxDQUFDO0FBSlcsUUFBQSxrQkFBa0Isc0JBSTdCO0FBRUssSUFBTSx1QkFBdUIsR0FBRyxVQUN0QyxNQUEyQjtJQUUzQixPQUFPLE1BQU0sQ0FBQyxHQUFHLEtBQUssaUJBQWlCLENBQUM7QUFDekMsQ0FBQyxDQUFDO0FBSlcsUUFBQSx1QkFBdUIsMkJBSWxDO0FBRUssSUFBTSxpQkFBaUIsR0FBRyxVQUNoQyxNQUEyQjtJQUUzQixPQUFPLE1BQU0sQ0FBQyxHQUFHLEtBQUssV0FBVyxDQUFDO0FBQ25DLENBQUMsQ0FBQztBQUpXLFFBQUEsaUJBQWlCLHFCQUk1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSdW5uZXIgZnJvbSBcIi4vcnVubmVyXCI7XG5cbnR5cGUgQW55Vm9pZCA9IFByb21pc2U8dm9pZD4gfCB2b2lkO1xuXG5leHBvcnQgdHlwZSBBbnlWb2lkQ0IgPSAoKSA9PiBBbnlWb2lkO1xuXG5leHBvcnQgdHlwZSBBbnlDQiA9ICgpID0+IFByb21pc2U8YW55PiB8IGFueTtcblxuZXhwb3J0IHR5cGUgVGVzdENCPFQgZXh0ZW5kcyBhbnlbXT4gPSAoLi4ubWFjcm9BcmdzOiBUKSA9PiBBbnlWb2lkO1xuXG5leHBvcnQgdHlwZSBMb2dGbiA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIENvbG9yRm4gPSAoLi4uYXJnczogYW55W10pID0+IHN0cmluZztcblxuZXhwb3J0IHR5cGUgVGl0bGU8VCBleHRlbmRzIGFueVtdPiA9IHN0cmluZyB8ICgoLi4uYXJnczogUGFydGlhbDxUPikgPT4gc3RyaW5nKTtcblxuZXhwb3J0IGludGVyZmFjZSBDb2xvcnMge1xuXHR1bmRlcmxpbmU6IENvbG9yRm47XG5cdHJlZDogQ29sb3JGbjtcblx0Z3JlZW46IENvbG9yRm47XG5cdGJsdWU6IENvbG9yRm47XG5cdGJvbGQ6IENvbG9yRm47XG5cdG1hZ2VudGE6IENvbG9yRm47XG5cdGdyZXk6IENvbG9yRm47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGV2Q29uZmlndXJhdGlvbiB7XG5cdGxvZ2dlcj86IFBpY2s8Q29uc29sZSwgXCJsb2dcIj47XG5cdGZvcm1hdD86IGJvb2xlYW47XG5cdHN5bWJvbHM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJ1bm5lckNvbmZpZ3VyYXRpb24ge1xuXHR1c2U6IGtleW9mIFJ1bm5lcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXF1ZW5jZXJDb25maWd1cmF0aW9uIGV4dGVuZHMgUnVubmVyQ29uZmlndXJhdGlvbiB7XG5cdHVzZTogXCJzZXF1ZW5jZXJcIjtcblx0aW5jbHVkZTogc3RyaW5nW107XG5cdGV4Y2x1ZGU/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYXRjaEV4dGVuc2lvbnNDb25maWd1cmF0aW9uIGV4dGVuZHMgUnVubmVyQ29uZmlndXJhdGlvbiB7XG5cdHVzZTogXCJtYXRjaEV4dGVuc2lvbnNcIjtcblx0bWF0Y2g6IHN0cmluZ1tdO1xuXHRyb290OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50cnlQb2ludENvbmZpZ3VyYXRpb24gZXh0ZW5kcyBSdW5uZXJDb25maWd1cmF0aW9uIHtcblx0dXNlOiBcImVudHJ5UG9pbnRcIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maWd1cmF0aW9uIHtcblx0cnVubmVyPzogUnVubmVyQ29uZmlndXJhdGlvbjtcblx0Y29sb3JzPzogYm9vbGVhbjtcblx0YnViYmxlSG9va3M/OiBib29sZWFuO1xuXHR2b2x1bWU/OiBudW1iZXI7XG5cdGRldj86IGZhbHNlIHwgRGV2Q29uZmlndXJhdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuXHR0eXBlOlxuXHRcdHwgXCJpdFwiXG5cdFx0fCBcImRlc2NyaWJlLXN0YXJ0XCJcblx0XHR8IFwiZGVzY3JpYmUtZW5kXCJcblx0XHR8IFwiZG9PbmNlXCJcblx0XHR8IFwiaG9va1wiXG5cdFx0fCBcImNvbmZpZ3VyZVwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvb2tBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuXHR0eXBlOiBcImhvb2tcIjtcblx0Y2I6IEFueVZvaWRDQjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJdEFjdGlvbjxUIGV4dGVuZHMgYW55W10+IGV4dGVuZHMgQWN0aW9uIHtcblx0dHlwZTogXCJpdFwiO1xuXHR0aXRsZTogc3RyaW5nO1xuXHRjYjogVGVzdENCPFQ+O1xuXHRhcmdzOiBUO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlc2NyaWJlU3RhcnRBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuXHR0eXBlOiBcImRlc2NyaWJlLXN0YXJ0XCI7XG5cdHRpdGxlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzY3JpYmVFbmRBY3Rpb24gZXh0ZW5kcyBBY3Rpb24ge1xuXHR0eXBlOiBcImRlc2NyaWJlLWVuZFwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZpZ3VyZUFjdGlvbiBleHRlbmRzIEFjdGlvbiB7XG5cdHR5cGU6IFwiY29uZmlndXJlXCI7XG5cdGNvbmZpZ3VyYXRpb246IFBhcnRpYWw8Q29uZmlndXJhdGlvbj47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9PbmNlQWN0aW9uIGV4dGVuZHMgQWN0aW9uIHtcblx0dHlwZTogXCJkb09uY2VcIjtcblx0Y2I6IEFueUNCO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEhvb2tzIHtcblx0YmVmb3JlRWFjaDogQW55Vm9pZENCO1xuXHRhZnRlckVhY2g6IEFueVZvaWRDQjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb250ZXh0IHtcblx0cGFzc2VkOiBudW1iZXI7XG5cdGZhaWxlZDogbnVtYmVyO1xuXHR0ZXN0UnVudGltZTogbnVtYmVyO1xuXHRlcnJvcnM6IGFueVtdO1xufVxuLy8gRXJyb3JzXG5cbmV4cG9ydCBjbGFzcyBDb25maWdFcnJvciBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3Iob3B0aW9uTmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcblx0XHRzdXBlcihgT3B0aW9uICcke29wdGlvbk5hbWV9JzogJHttZXNzYWdlfWApO1xuXHRcdHRoaXMubmFtZSA9IFwiQ29uZmlnIEVycm9yXCI7XG5cdH1cbn1cblxuLy8gR3VhcmRzXG5cbmV4cG9ydCBjb25zdCBpc0hvb2tBY3Rpb24gPSAoYWN0aW9uOiBBY3Rpb24pOiBhY3Rpb24gaXMgSG9va0FjdGlvbiA9PiB7XG5cdHJldHVybiBhY3Rpb24udHlwZSA9PT0gXCJob29rXCI7XG59O1xuXG5leHBvcnQgY29uc3QgaXNJdEFjdGlvbiA9IDxUIGV4dGVuZHMgYW55W10+KFxuXHRhY3Rpb246IEFjdGlvblxuKTogYWN0aW9uIGlzIEl0QWN0aW9uPFQ+ID0+IHtcblx0cmV0dXJuIGFjdGlvbi50eXBlID09PSBcIml0XCI7XG59O1xuXG5leHBvcnQgY29uc3QgaXNEZXNjcmliZVN0YXJ0QWN0aW9uID0gKFxuXHRhY3Rpb246IEFjdGlvblxuKTogYWN0aW9uIGlzIERlc2NyaWJlU3RhcnRBY3Rpb24gPT4ge1xuXHRyZXR1cm4gYWN0aW9uLnR5cGUgPT09IFwiZGVzY3JpYmUtc3RhcnRcIjtcbn07XG5cbmV4cG9ydCBjb25zdCBpc0Rlc2NyaWJlRW5kQWN0aW9uID0gKFxuXHRhY3Rpb246IEFjdGlvblxuKTogYWN0aW9uIGlzIERlc2NyaWJlRW5kQWN0aW9uID0+IHtcblx0cmV0dXJuIGFjdGlvbi50eXBlID09PSBcImRlc2NyaWJlLWVuZFwiO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzQ29uZmlndXJhdGlvbkFjdGlvbiA9IChcblx0YWN0aW9uOiBBY3Rpb25cbik6IGFjdGlvbiBpcyBDb25maWd1cmVBY3Rpb24gPT4ge1xuXHRyZXR1cm4gYWN0aW9uLnR5cGUgPT09IFwiY29uZmlndXJlXCI7XG59O1xuXG5leHBvcnQgY29uc3QgaXNEb09uY2VBY3Rpb24gPSAoYWN0aW9uOiBBY3Rpb24pOiBhY3Rpb24gaXMgRG9PbmNlQWN0aW9uID0+IHtcblx0cmV0dXJuIGFjdGlvbi50eXBlID09PSBcImRvT25jZVwiO1xufTtcblxuZXhwb3J0IGNvbnN0IGlzRW50cnlQb2ludENvbmZpZyA9IChcblx0Y29uZmlnOiBSdW5uZXJDb25maWd1cmF0aW9uXG4pOiBjb25maWcgaXMgRW50cnlQb2ludENvbmZpZ3VyYXRpb24gPT4ge1xuXHRyZXR1cm4gY29uZmlnLnVzZSA9PT0gXCJlbnRyeVBvaW50XCI7XG59O1xuXG5leHBvcnQgY29uc3QgaXNNYXRjaEV4dGVuc2lvbnNDb25maWcgPSAoXG5cdGNvbmZpZzogUnVubmVyQ29uZmlndXJhdGlvblxuKTogY29uZmlnIGlzIE1hdGNoRXh0ZW5zaW9uc0NvbmZpZ3VyYXRpb24gPT4ge1xuXHRyZXR1cm4gY29uZmlnLnVzZSA9PT0gXCJtYXRjaEV4dGVuc2lvbnNcIjtcbn07XG5cbmV4cG9ydCBjb25zdCBpc1NlcXVlbmNlckNvbmZpZyA9IChcblx0Y29uZmlnOiBSdW5uZXJDb25maWd1cmF0aW9uXG4pOiBjb25maWcgaXMgU2VxdWVuY2VyQ29uZmlndXJhdGlvbiA9PiB7XG5cdHJldHVybiBjb25maWcudXNlID09PSBcInNlcXVlbmNlclwiO1xufTtcbiJdfQ==